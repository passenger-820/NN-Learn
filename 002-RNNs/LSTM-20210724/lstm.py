# -*- coding: utf-8 -*-
"""lstm

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GX0Rqur8T45MSYhLU9MYWAbycfLH4-Fu


在自己的机子上没有跑成功
下载数据和模型
python -m spacy download en

 raise IOError(Errors.E050.format(name=name))
OSError: [E050] Can't find model 'en'. It doesn't seem to be a shortcut link, a Python package or a valid path to a data directory.
"""



# K80 gpu for 12 hours
import numpy as np
import torch
from torch import nn, optim
from torchtext.legacy import data, datasets
import spacy

nlp=spacy.load("en_core_web_sm")

print('GPU:', torch.cuda.is_available())

torch.manual_seed(123)

TEXT = data.Field(tokenize='spacy')
LABEL = data.LabelField(dtype=torch.float)
train_data, test_data = datasets.IMDB.splits(TEXT, LABEL)

print('len of train data:', len(train_data))
print('len of test data:', len(test_data))

print(train_data.examples[15].text)
print(train_data.examples[15].label)

# word2vec, glove
TEXT.build_vocab(train_data, max_size=10000, vectors='glove.6B.100d')
LABEL.build_vocab(train_data)

batchsz = 30
device = torch.device('cuda')
train_iterator, test_iterator = data.BucketIterator.splits(
    (train_data, test_data),
    batch_size=batchsz,
    device=device
)


class LSTM(nn.Module):

    def __init__(self, vocab_size, embedding_dim, hidden_dim):
        """
        """
        super(LSTM, self).__init__()

        # 实现embedding操作 [0-10001] => [100]
        self.embedding = nn.Embedding(vocab_size, embedding_dim)
        # [input_size,hidden_size] 即 [100] => [256]
        self.lstm = nn.LSTM(embedding_dim, hidden_dim, num_layers=2,
                           bidirectional=True, dropout=0.5)# bidirectional=True 双向的，这样可以知道上下文了 dropout=0.5 增加鲁棒性
        # 这就相当于输出层了 [256*2] => [1]
        self.fc = nn.Linear(hidden_dim * 2, 1)  # *2 是因为双向
        self.dropout = nn.Dropout(0.5)

    def forward(self, x):
        """
        x: [seq_len, b] vs [b, 3, 28, 28]
        """
        # 把batch句中每个单词编码 [seq, b, 1] => [seq, b, 100] ，经dropout增强鲁棒性
        embedding = self.dropout(self.embedding(x))

        # output: [seq, b, hid_dim*2] （双向的）
        # h和cell的shape是一样的
        	# hidden/h: [num_layers*2, b, hid_dim]  （双向的）
        	# cell/c: [num_layers*2, b, hid_di]  （双向的）
        output, (hidden, cell) = self.lstm(embedding) # h0，c0默认使用0，就不写了

        # 拿走这双向出的output
        # [num_layers*2, b, hid_dim] => 2 of [b, hid_dim] => [b, hid_dim*2]
        hidden = torch.cat([hidden[-2], hidden[-1]], dim=1)

        # dropout后送入fc中 [b, hid_dim*2] => [b, 1] 各自代表pos的可能性
        hidden = self.dropout(hidden)
        out = self.fc(hidden)

        return out


lstm = LSTM(len(TEXT.vocab), 100, 256)

pretrained_embedding = TEXT.vocab.vectors
# print('pretrained_embedding:', pretrained_embedding.shape)
lstm.embedding.weight.data.copy_(pretrained_embedding)
# print('embedding layer inited.')


optimizer = optim.Adam(lstm.parameters(), lr=1e-3)
criteon = nn.BCEWithLogitsLoss().to(device)
lstm.to(device)




def binary_acc(preds, y):
    """
    get accuracy
    """
    preds = torch.round(torch.sigmoid(preds))
    correct = torch.eq(preds, y).float()
    acc = correct.sum() / len(correct)
    return acc


def train(lstm, iterator, optimizer, criteon):
    avg_acc = []
    lstm.train()

    for i, batch in enumerate(iterator):
        # [seq, b] => [b, 1] => [b]
        pred = lstm(batch.text).squeeze(1)

        loss = criteon(pred, batch.label)
        acc = binary_acc(pred, batch.label).item()
        avg_acc.append(acc)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if i % 10 == 0:
            print(i, acc)

    avg_acc = np.array(avg_acc).mean()
    print('avg acc:', avg_acc)


def eval(lstm, iterator, criteon):
    avg_acc = []

    lstm.eval()

    with torch.no_grad():  # test不需要梯度信息！
        for batch in iterator:
            # [b, 1] => [b]
            pred = lstm(batch.text).squeeze(1)

            loss = criteon(pred, batch.label)
            acc = binary_acc(pred, batch.label).item()
            avg_acc.append(acc)

    avg_acc = np.array(avg_acc).mean()

    print('>>test:', avg_acc)


for epoch in range(10):
    eval(lstm, test_iterator, criteon)
    train(lstm, train_iterator, optimizer, criteon)